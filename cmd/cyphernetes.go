// Code generated by goyacc -o cmd/cyphernetes.go -p yy grammar/cyphernetes.y. DO NOT EDIT.

//line grammar/cyphernetes.y:2
package cmd

import __yyfmt__ "fmt"

//line grammar/cyphernetes.y:2

import (
	"fmt"
	"log"
	"strconv"
	"strings"
)

func yyerror(s string) {
	fmt.Printf("Syntax error: %s\n", s)
}

func debugLog(v ...interface{}) {
	if logLevel == "debug" {
		log.Println(v...)
	}
}

//line grammar/cyphernetes.y:22
type yySymType struct {
	yys               int
	strVal            string
	jsonPath          string
	jsonPathList      []string
	pattern           *NodePattern
	clause            *Clause
	expression        *Expression
	matchClause       *MatchClause
	nodePatternList   []*NodePattern
	returnClause      *ReturnClause
	properties        *Properties
	jsonPathValue     *Property
	jsonPathValueList []*Property
	value             interface{}
}

const IDENT = 57346
const JSONPATH = 57347
const INT = 57348
const BOOLEAN = 57349
const STRING = 57350
const LPAREN = 57351
const RPAREN = 57352
const COLON = 57353
const MATCH = 57354
const RETURN = 57355
const EOF = 57356
const LBRACE = 57357
const RBRACE = 57358
const COMMA = 57359
const DASH = 57360
const ARROW_LEFT = 57361
const ARROW_RIGHT = 57362

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"JSONPATH",
	"INT",
	"BOOLEAN",
	"STRING",
	"LPAREN",
	"RPAREN",
	"COLON",
	"MATCH",
	"RETURN",
	"EOF",
	"LBRACE",
	"RBRACE",
	"COMMA",
	"DASH",
	"ARROW_LEFT",
	"ARROW_RIGHT",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar/cyphernetes.y:173

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 47

var yyAct = [...]int8{
	35, 6, 26, 14, 15, 16, 12, 14, 15, 16,
	13, 22, 37, 38, 19, 21, 18, 30, 9, 7,
	39, 5, 32, 3, 23, 33, 8, 28, 29, 36,
	24, 25, 11, 20, 43, 44, 42, 27, 17, 40,
	10, 31, 41, 34, 4, 2, 1,
}

var yyPact = [...]int16{
	11, -1000, 8, 17, 4, 27, -1000, -11, 34, -1000,
	-1, -1000, 17, 17, -3, -9, -1000, 13, 25, -1000,
	-15, -1000, -1000, 33, -1000, 17, 17, 7, -1000, -1000,
	-1000, 15, 24, -1000, -4, -1000, 9, -1000, 24, 28,
	-1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 46, 45, 1, 44, 19, 43, 0, 42, 41,
	40, 10,
}

var yyR1 = [...]int8{
	0, 1, 2, 3, 3, 3, 3, 3, 4, 10,
	10, 11, 11, 11, 11, 5, 5, 9, 6, 6,
	7, 8, 8, 8,
}

var yyR2 = [...]int8{
	0, 3, 2, 3, 5, 5, 3, 1, 2, 1,
	3, 2, 1, 1, 2, 5, 6, 3, 1, 3,
	3, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, 12, -4, 13, -3, -5, 9, 14,
	-10, 5, 17, -11, 18, 19, 20, 4, 17, -3,
	-5, 18, 20, 11, 5, -11, 17, 4, -3, -3,
	10, -9, 15, 10, -6, -7, 5, 16, 17, 11,
	-7, -8, 8, 6, 7,
}

var yyDef = [...]int8{
	0, -2, 0, 0, 0, 0, 2, 7, 0, 1,
	8, 9, 0, 0, 0, 12, 13, 0, 0, 3,
	6, 11, 14, 0, 10, 0, 0, 0, 4, 5,
	15, 0, 0, 16, 0, 18, 0, 17, 0, 0,
	19, 20, 21, 22, 23,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:64
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].returnClause}}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:70
		{
			yyVAL.matchClause = &MatchClause{NodePatternList: yyDollar[2].nodePatternList}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:76
		{
			yyVAL.nodePatternList = append([]*NodePattern{yyDollar[1].pattern}, yyDollar[3].nodePatternList...)
		}
	case 4:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:79
		{
			yyVAL.nodePatternList = []*NodePattern{yyDollar[1].pattern, yyDollar[3].pattern}
			yyDollar[1].pattern.ConnectedNodePatternRight = &NodePattern{Name: yyDollar[3].pattern.Name, Kind: yyDollar[3].pattern.Kind}                       // Linking LeftNode and RightNode through Relationship
			yyDollar[3].pattern.ConnectedNodePatternLeft = &NodePattern{Name: yyDollar[1].pattern.Name, Kind: yyDollar[1].pattern.Kind}                        // For bidirectional relationships
			yyDollar[3].pattern.ConnectedNodePatternRight = &NodePattern{Name: yyDollar[5].nodePatternList[0].Name, Kind: yyDollar[5].nodePatternList[0].Kind} // For bidirectional relationships
			yyDollar[5].nodePatternList[0].ConnectedNodePatternLeft = &NodePattern{Name: yyDollar[3].pattern.Name, Kind: yyDollar[3].pattern.Kind}             // Linking RightNode and LeftNode through Relationship
			yyVAL.nodePatternList = append(yyVAL.nodePatternList, yyDollar[5].nodePatternList...)
		}
	case 5:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:87
		{
			yyVAL.nodePatternList = []*NodePattern{yyDollar[1].pattern, yyDollar[3].pattern}
			yyDollar[1].pattern.ConnectedNodePatternRight = &NodePattern{Name: yyDollar[3].pattern.Name, Kind: yyDollar[3].pattern.Kind} // Linking LeftNode and RightNode through Relationship
			yyDollar[3].pattern.ConnectedNodePatternLeft = &NodePattern{Name: yyDollar[1].pattern.Name, Kind: yyDollar[1].pattern.Kind}  // For bidirectional relationships
			yyVAL.nodePatternList = append(yyVAL.nodePatternList, yyDollar[5].nodePatternList...)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:93
		{
			yyVAL.nodePatternList = []*NodePattern{yyDollar[1].pattern, yyDollar[3].pattern}
			yyDollar[1].pattern.ConnectedNodePatternRight = &NodePattern{Name: yyDollar[3].pattern.Name, Kind: yyDollar[3].pattern.Kind} // Linking LeftNode and RightNode through Relationship
			yyDollar[3].pattern.ConnectedNodePatternLeft = &NodePattern{Name: yyDollar[1].pattern.Name, Kind: yyDollar[1].pattern.Kind}  // For bidirectional relationships
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:98
		{
			yyVAL.nodePatternList = []*NodePattern{yyDollar[1].pattern}
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:104
		{
			yyVAL.returnClause = &ReturnClause{JsonPaths: yyDollar[2].jsonPathList}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:110
		{
			yyVAL.jsonPathList = []string{yyDollar[1].strVal}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:113
		{
			yyVAL.jsonPathList = append(yyDollar[1].jsonPathList, yyDollar[3].strVal)
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:119
		{
			logDebug("Found relationship (no direction)")
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:120
		{
			logDebug("Found relationship (left)")
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:121
		{
			logDebug("Found relationship (right)")
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:122
		{
			logDebug("Found relationship (both)")
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:126
		{
			yyVAL.pattern = &NodePattern{Name: yyDollar[2].strVal, Kind: yyDollar[4].strVal, Properties: nil}
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar/cyphernetes.y:129
		{
			yyVAL.pattern = &NodePattern{Name: yyDollar[2].strVal, Kind: yyDollar[4].strVal, Properties: yyDollar[5].properties}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:135
		{
			yyVAL.properties = &Properties{PropertyList: yyDollar[2].jsonPathValueList}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:141
		{
			yyVAL.jsonPathValueList = []*Property{yyDollar[1].jsonPathValue} // Start with one Property element
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:144
		{
			yyVAL.jsonPathValueList = append(yyDollar[1].jsonPathValueList, yyDollar[3].jsonPathValue) // $1 and $3 are the left and right operands of COMMA
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:150
		{
			yyVAL.jsonPathValue = &Property{Key: yyDollar[1].strVal, Value: yyDollar[3].value}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:156
		{
			yyVAL.value = strings.Trim(yyDollar[1].strVal, "\"")
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:159
		{
			// Parse the int from the string
			i, err := strconv.Atoi(yyDollar[1].strVal)
			if err != nil {
				// ... handle error
				panic(err)
			}
			yyVAL.value = i
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:168
		{
			// Parse the boolean from the string
			yyVAL.value = strings.ToUpper(yyDollar[1].strVal) == "TRUE"
		}
	}
	goto yystack /* stack new state and value */
}
