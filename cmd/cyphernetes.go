// Code generated by goyacc -o cmd/cyphernetes.go -p yy grammar/cyphernetes.y. DO NOT EDIT.

//line grammar/cyphernetes.y:2
package cmd

import __yyfmt__ "fmt"

//line grammar/cyphernetes.y:2

import (
	"fmt"
	"log"
	"strconv"
	"strings"
)

func yyerror(s string) {
	fmt.Printf("Syntax error: %s\n", s)
}

func debugLog(v ...interface{}) {
	if logLevel == "debug" {
		log.Println(v...)
	}
}

//line grammar/cyphernetes.y:22
type yySymType struct {
	yys                  int
	strVal               string
	jsonPath             string
	jsonPathList         []string
	nodePattern          *NodePattern
	clause               *Clause
	expression           *Expression
	matchClause          *MatchClause
	returnClause         *ReturnClause
	properties           *Properties
	jsonPathValue        *Property
	jsonPathValueList    []*Property
	value                interface{}
	relationship         *Relationship
	resourceProperties   *ResourceProperties
	nodeRelationshipList *NodeRelationshipList
}

const IDENT = 57346
const JSONPATH = 57347
const INT = 57348
const BOOLEAN = 57349
const STRING = 57350
const LPAREN = 57351
const RPAREN = 57352
const COLON = 57353
const MATCH = 57354
const RETURN = 57355
const EOF = 57356
const LBRACE = 57357
const RBRACE = 57358
const COMMA = 57359
const REL_NOPROPS_RIGHT = 57360
const REL_NOPROPS_LEFT = 57361
const REL_NOPROPS_BOTH = 57362
const REL_NOPROPS_NONE = 57363
const REL_BEGINPROPS_LEFT = 57364
const REL_BEGINPROPS_NONE = 57365
const REL_ENDPROPS_RIGHT = 57366
const REL_ENDPROPS_NONE = 57367

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"JSONPATH",
	"INT",
	"BOOLEAN",
	"STRING",
	"LPAREN",
	"RPAREN",
	"COLON",
	"MATCH",
	"RETURN",
	"EOF",
	"LBRACE",
	"RBRACE",
	"COMMA",
	"REL_NOPROPS_RIGHT",
	"REL_NOPROPS_LEFT",
	"REL_NOPROPS_BOTH",
	"REL_NOPROPS_NONE",
	"REL_BEGINPROPS_LEFT",
	"REL_BEGINPROPS_NONE",
	"REL_ENDPROPS_RIGHT",
	"REL_ENDPROPS_NONE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar/cyphernetes.y:247

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 57

var yyAct = [...]int8{
	42, 6, 30, 16, 15, 17, 14, 19, 18, 20,
	35, 34, 33, 32, 12, 24, 13, 16, 15, 17,
	14, 19, 18, 44, 45, 22, 40, 9, 25, 26,
	5, 7, 37, 38, 3, 46, 28, 27, 31, 50,
	51, 49, 43, 8, 23, 29, 47, 11, 36, 21,
	10, 39, 48, 41, 4, 2, 1,
}

var yyPact = [...]int16{
	22, -1000, 17, 34, 13, 42, -1000, -1, 45, -1000,
	8, -1000, 34, 34, -1000, -1000, -1000, -1000, 45, 45,
	27, 25, 40, -15, -1000, -12, -14, -1000, 44, -1000,
	34, 34, -1000, -1000, -1000, -1000, 11, -1000, -1000, -1000,
	37, 7, -1000, 24, -1000, 37, 33, -1000, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int8{
	0, 56, 55, 54, 31, 53, 0, 52, 51, 50,
	14, 9, 1,
}

var yyR1 = [...]int8{
	0, 1, 2, 12, 12, 12, 12, 12, 4, 3,
	9, 9, 10, 10, 10, 10, 10, 10, 10, 10,
	11, 11, 8, 5, 5, 6, 7, 7, 7,
}

var yyR2 = [...]int8{
	0, 3, 2, 1, 3, 5, 5, 3, 3, 2,
	1, 3, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 4, 3, 1, 3, 3, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, 12, -3, 13, -12, -4, 9, 14,
	-9, 5, -10, 17, 21, 19, 18, 20, 23, 22,
	-11, 4, 17, -4, -12, -11, -11, 10, 11, 5,
	17, -10, 25, 24, 25, 24, 4, -12, -12, -8,
	15, -5, -6, 5, 16, 17, 11, -6, -7, 8,
	6, 7,
}

var yyDef = [...]int8{
	0, -2, 0, 0, 0, 0, 2, 3, 0, 1,
	9, 10, 0, 0, 12, 13, 14, 15, 0, 0,
	0, 0, 0, 4, 7, 0, 0, 8, 0, 11,
	0, 0, 16, 18, 17, 19, 20, 5, 6, 21,
	0, 0, 23, 0, 22, 0, 0, 24, 25, 26,
	27, 28,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:69
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].returnClause}}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:75
		{
			yyVAL.matchClause = &MatchClause{Nodes: yyDollar[2].nodeRelationshipList.Nodes, Relationships: yyDollar[2].nodeRelationshipList.Relationships}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:81
		{
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         []*NodePattern{yyDollar[1].nodePattern},
				Relationships: []*Relationship{},
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:87
		{
			yyDollar[2].relationship.LeftNode = yyDollar[1].nodePattern
			yyDollar[2].relationship.RightNode = yyDollar[3].nodePattern
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         []*NodePattern{yyDollar[1].nodePattern, yyDollar[3].nodePattern},
				Relationships: []*Relationship{yyDollar[2].relationship},
			}
		}
	case 5:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:95
		{
			yyDollar[2].relationship.LeftNode = yyDollar[1].nodePattern
			yyDollar[2].relationship.RightNode = yyDollar[3].nodePattern
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyDollar[1].nodePattern, yyDollar[3].nodePattern}, yyDollar[5].nodeRelationshipList.Nodes...),
				Relationships: append([]*Relationship{yyDollar[2].relationship}, yyDollar[5].nodeRelationshipList.Relationships...),
			}
		}
	case 6:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:103
		{
			yyDollar[2].relationship.LeftNode = yyDollar[1].nodePattern
			yyDollar[2].relationship.RightNode = yyDollar[3].nodePattern
			yyDollar[4].relationship.LeftNode = yyDollar[3].nodePattern
			yyDollar[4].relationship.RightNode = yyDollar[5].nodeRelationshipList.Nodes[0]
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyDollar[1].nodePattern, yyDollar[3].nodePattern}, yyDollar[5].nodeRelationshipList.Nodes...),
				Relationships: append([]*Relationship{yyDollar[2].relationship, yyDollar[4].relationship}, yyDollar[5].nodeRelationshipList.Relationships...),
			}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:113
		{
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyDollar[1].nodePattern}, yyDollar[3].nodeRelationshipList.Nodes...),
				Relationships: yyDollar[3].nodeRelationshipList.Relationships,
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:152
		{
			yyVAL.nodePattern = &NodePattern{ResourceProperties: yyDollar[2].resourceProperties}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:158
		{
			yyVAL.returnClause = &ReturnClause{JsonPaths: yyDollar[2].jsonPathList}
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:164
		{
			yyVAL.jsonPathList = []string{yyDollar[1].strVal}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:167
		{
			yyVAL.jsonPathList = append(yyDollar[1].jsonPathList, yyDollar[3].strVal)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:173
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: None, LeftNode: nil, RightNode: nil}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:176
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Left, LeftNode: nil, RightNode: nil}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:179
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Right, LeftNode: nil, RightNode: nil}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:182
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Both, LeftNode: nil, RightNode: nil}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:185
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: None, LeftNode: nil, RightNode: nil}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:188
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: Left, LeftNode: nil, RightNode: nil}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:191
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: Right, LeftNode: nil, RightNode: nil}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:194
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: Both, LeftNode: nil, RightNode: nil}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:200
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyDollar[1].strVal, Kind: yyDollar[3].strVal, Properties: nil}
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar/cyphernetes.y:203
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyDollar[1].strVal, Kind: yyDollar[3].strVal, Properties: yyDollar[4].properties}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:209
		{
			yyVAL.properties = &Properties{PropertyList: yyDollar[2].jsonPathValueList}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:215
		{
			yyVAL.jsonPathValueList = []*Property{yyDollar[1].jsonPathValue} // Start with one Property element
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:218
		{
			yyVAL.jsonPathValueList = append(yyDollar[1].jsonPathValueList, yyDollar[3].jsonPathValue) // $1 and $3 are the left and right operands of COMMA
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:224
		{
			yyVAL.jsonPathValue = &Property{Key: yyDollar[1].strVal, Value: yyDollar[3].value}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:230
		{
			yyVAL.value = strings.Trim(yyDollar[1].strVal, "\"")
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:233
		{
			// Parse the int from the string
			i, err := strconv.Atoi(yyDollar[1].strVal)
			if err != nil {
				// ... handle error
				panic(err)
			}
			yyVAL.value = i
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:242
		{
			// Parse the boolean from the string
			yyVAL.value = strings.ToUpper(yyDollar[1].strVal) == "TRUE"
		}
	}
	goto yystack /* stack new state and value */
}
