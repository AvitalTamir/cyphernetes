#!/bin/bash

set -e

echo "🚀 Deploying Cyphernetes DNS Service..."

# Check if wrangler is installed
if ! command -v wrangler &> /dev/null; then
    echo "❌ Wrangler CLI not found. Please install it first:"
    echo "npm install -g wrangler"
    exit 1
fi

# Check if user is authenticated
if ! wrangler whoami &> /dev/null; then
    echo "🔐 Please authenticate with Cloudflare:"
    wrangler login
fi

# Build notebook interface
echo "📓 Building notebook interface..."
cd ..
make notebook-build
cd dns-service

# Copy notebook assets and update static HTML
echo "📦 Processing notebook assets..."
NOTEBOOK_STATIC="../pkg/notebook/static"
if [ -d "$NOTEBOOK_STATIC" ]; then
    # Read the built index.html
    if [ -f "$NOTEBOOK_STATIC/index.html" ]; then
        echo "✨ Updating static HTML with built assets..."
        
        # Extract asset filenames from index.html
        JS_FILE=$(grep -o 'assets/index-[^"]*\.js' "$NOTEBOOK_STATIC/index.html" || echo "")
        CSS_FILE=$(grep -o 'assets/index-[^"]*\.css' "$NOTEBOOK_STATIC/index.html" || echo "")
        
        if [ -n "$JS_FILE" ] && [ -n "$CSS_FILE" ]; then
            # Read and base64 encode the assets
            JS_CONTENT=$(base64 -i "$NOTEBOOK_STATIC/$JS_FILE" | tr -d '\n')
            CSS_CONTENT=$(base64 -i "$NOTEBOOK_STATIC/$CSS_FILE" | tr -d '\n')
            
            # Also encode favicon and logo if they exist
            FAVICON_CONTENT=""
            LOGO_CONTENT=""
            if [ -f "$NOTEBOOK_STATIC/favicon.ico" ]; then
                FAVICON_CONTENT=$(base64 -i "$NOTEBOOK_STATIC/favicon.ico" | tr -d '\n')
            fi
            if [ -f "$NOTEBOOK_STATIC/logo.png" ]; then
                LOGO_CONTENT=$(base64 -i "$NOTEBOOK_STATIC/logo.png" | tr -d '\n')
            fi
            
            # Update the static-assets.ts file with the correct filenames and embedded content
            # Write HTML template
            cat > src/static-assets.ts << 'EOF'
// Static HTML template for the notebook interface - auto-generated by deploy.sh
export const NOTEBOOK_HTML = `<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cyphernetes Notebook</title>
EOF
            
            # Add the JS and CSS file references
            echo "    <script type=\"module\" crossorigin src=\"/$JS_FILE\"></script>" >> src/static-assets.ts
            echo "    <link rel=\"stylesheet\" crossorigin href=\"/$CSS_FILE\">" >> src/static-assets.ts
            
            # Continue with the HTML template
            cat >> src/static-assets.ts << 'EOF'
  </head>
  <body>
    <div id="root"></div>
    <script>
      // Auto-redirect to API test if no token provided
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get('token');
      if (!token) {
        console.warn('No token provided - notebook may not work correctly');
      }
    </script>
  </body>
</html>`;

// Base64 encoded assets
export const ASSETS: Record<string, string> = {
EOF

            # Add the JS and CSS assets
            echo "  '$JS_FILE': '$JS_CONTENT'," >> src/static-assets.ts
            echo "  '$CSS_FILE': '$CSS_CONTENT'" >> src/static-assets.ts

            # Add favicon and logo if they exist
            if [ -n "$FAVICON_CONTENT" ]; then
                echo "  ,'favicon.ico': '$FAVICON_CONTENT'" >> src/static-assets.ts
            fi
            if [ -n "$LOGO_CONTENT" ]; then
                echo "  ,'logo.png': '$LOGO_CONTENT'" >> src/static-assets.ts
            fi

            # Close the ASSETS object
            echo "};" >> src/static-assets.ts
            echo "✅ Updated static-assets.ts with asset files: $JS_FILE, $CSS_FILE"
        else
            echo "⚠️ Could not find asset files in index.html, using minimal interface"
        fi
    else
        echo "⚠️ No index.html found, using minimal interface"
    fi
else
    echo "⚠️ Notebook static directory not found, using minimal interface"
fi

# Process static assets for embedding
echo "📦 Processing static assets for embedding..."
if [ -d "$NOTEBOOK_STATIC/assets" ]; then
    echo "✨ Embedding asset references in HTML template..."
    # Assets are already referenced in the HTML template generated above
    echo "✅ Static asset references updated in worker"
else
    echo "⚠️ No assets directory found, using minimal interface"
fi

# Install dependencies
echo "📦 Installing dependencies..."
npm install

# Build and deploy
echo "🏗️ Building and deploying worker..."
wrangler deploy

echo "✅ Deployment complete!"
echo ""
echo "🌐 Your DNS service is now available at:"
echo "   https://go.cyphernet.es"
echo ""
echo "📋 Next steps:"
echo "1. Test subdomain creation: curl -X POST https://go.cyphernet.es/api/subdomain -d '{\"expires_in\":600}'"
echo "2. Update your local Cyphernetes config to use this service"
echo "3. Monitor logs: wrangler tail"