// Code generated by goyacc -o pkg/parser/cyphernetes.go -p yy grammar/cyphernetes.y. DO NOT EDIT.

//line grammar/cyphernetes.y:2
package parser

import __yyfmt__ "fmt"

//line grammar/cyphernetes.y:2

import (
	"fmt"
	"log"
	"strconv"
	"strings"
)

func yyerror(s string) {
	fmt.Printf("Syntax error: %s\n", s)
}

func debugLog(v ...interface{}) {
	if LogLevel == "debug" {
		log.Println(v...)
	}
}

//line grammar/cyphernetes.y:22
type yySymType struct {
	yys                  int
	strVal               string
	jsonPath             string
	nodePattern          *NodePattern
	clause               *Clause
	expression           *Expression
	matchClause          *MatchClause
	setClause            *SetClause
	deleteClause         *DeleteClause
	createClause         *CreateClause
	returnClause         *ReturnClause
	returnItems          []*ReturnItem
	returnItem           *ReturnItem
	properties           *Properties
	jsonPathValue        *Property
	jsonPathValueList    []*Property
	keyValuePairs        []*KeyValuePair
	keyValuePair         *KeyValuePair
	value                interface{}
	relationship         *Relationship
	resourceProperties   *ResourceProperties
	nodeRelationshipList *NodeRelationshipList
	nodeIds              []string
}

const IDENT = 57346
const JSONPATH = 57347
const INT = 57348
const BOOLEAN = 57349
const STRING = 57350
const JSONDATA = 57351
const LPAREN = 57352
const RPAREN = 57353
const COLON = 57354
const MATCH = 57355
const WHERE = 57356
const SET = 57357
const DELETE = 57358
const CREATE = 57359
const RETURN = 57360
const EOF = 57361
const LBRACE = 57362
const RBRACE = 57363
const COMMA = 57364
const EQUALS = 57365
const AS = 57366
const REL_NOPROPS_RIGHT = 57367
const REL_NOPROPS_LEFT = 57368
const REL_NOPROPS_BOTH = 57369
const REL_NOPROPS_NONE = 57370
const REL_BEGINPROPS_LEFT = 57371
const REL_BEGINPROPS_NONE = 57372
const REL_ENDPROPS_RIGHT = 57373
const REL_ENDPROPS_NONE = 57374
const COUNT = 57375
const SUM = 57376

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"JSONPATH",
	"INT",
	"BOOLEAN",
	"STRING",
	"JSONDATA",
	"LPAREN",
	"RPAREN",
	"COLON",
	"MATCH",
	"WHERE",
	"SET",
	"DELETE",
	"CREATE",
	"RETURN",
	"EOF",
	"LBRACE",
	"RBRACE",
	"COMMA",
	"EQUALS",
	"AS",
	"REL_NOPROPS_RIGHT",
	"REL_NOPROPS_LEFT",
	"REL_NOPROPS_BOTH",
	"REL_NOPROPS_NONE",
	"REL_BEGINPROPS_LEFT",
	"REL_BEGINPROPS_NONE",
	"REL_ENDPROPS_RIGHT",
	"REL_ENDPROPS_NONE",
	"COUNT",
	"SUM",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar/cyphernetes.y:333

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 116

var yyAct = [...]int8{
	71, 15, 94, 37, 31, 27, 45, 18, 16, 77,
	30, 54, 41, 40, 42, 39, 44, 43, 38, 91,
	65, 41, 40, 42, 39, 44, 43, 90, 26, 82,
	81, 80, 79, 50, 98, 99, 53, 48, 55, 49,
	58, 85, 84, 36, 89, 52, 57, 56, 28, 29,
	59, 61, 51, 10, 23, 66, 28, 29, 70, 10,
	20, 78, 11, 12, 5, 10, 10, 13, 47, 35,
	22, 19, 4, 63, 64, 100, 5, 64, 62, 86,
	87, 73, 74, 72, 75, 6, 95, 17, 95, 14,
	92, 32, 69, 21, 68, 24, 97, 96, 83, 76,
	67, 102, 101, 60, 46, 34, 3, 25, 33, 9,
	88, 93, 8, 7, 2, 1,
}

var yyPact = [...]int16{
	59, -1000, 47, 48, 77, 77, 52, 41, 51, 35,
	23, 86, 101, -1000, 50, 29, -4, 100, -1000, -1000,
	-1000, 49, -1000, -1000, 18, 17, 9, -1000, 32, 25,
	14, -1000, -12, 16, -1000, -1000, 86, 77, 77, -1000,
	-1000, -1000, -1000, 99, 99, 67, 62, -1000, -1000, 15,
	96, 89, 87, 86, 75, 95, 14, -13, -1000, 0,
	65, -2, -1000, -1000, 94, 9, -1000, -1000, 21, 20,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 77, 77, -1000,
	-1000, -1000, -1000, 24, 3, -5, -1000, -1000, -1000, 81,
	93, 92, -1000, 13, -1000, 63, -1000, -1000, -1000, 83,
	75, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 115, 114, 113, 112, 106, 85, 8, 111, 2,
	0, 110, 3, 6, 1, 10, 4, 108, 107, 5,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 5, 3, 4, 17, 17, 15, 15, 16, 14,
	14, 14, 14, 14, 7, 7, 6, 18, 18, 18,
	18, 19, 19, 19, 19, 19, 12, 12, 12, 12,
	12, 12, 12, 12, 13, 13, 13, 11, 8, 8,
	9, 10, 10, 10, 10,
}

var yyR2 = [...]int8{
	0, 3, 3, 4, 3, 2, 3, 3, 4, 2,
	4, 2, 2, 2, 1, 3, 1, 3, 3, 1,
	3, 5, 5, 3, 3, 3, 2, 1, 3, 1,
	3, 3, 4, 4, 6, 6, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 4, 5, 3, 1, 3,
	3, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -5, 13, 17, -6, -3, -4, -5,
	18, 15, 16, 19, -6, -14, -7, 10, -14, 19,
	19, -6, 19, 19, -6, -18, 5, -19, 33, 34,
	-15, -16, 5, -17, 4, 19, 14, -12, 22, 28,
	26, 25, 27, 30, 29, -13, 4, 19, 19, 22,
	24, 20, 20, 22, 23, 22, -15, -7, -14, -13,
	4, -13, 11, 11, 12, 5, -19, 4, 5, 5,
	-16, -10, 8, 6, 7, 9, 4, 22, -12, 32,
	31, 32, 31, 4, 21, 21, -14, -14, -11, 20,
	24, 24, 9, -8, -9, 5, 4, 4, 21, 22,
	12, -9, -10,
}

var yyDef = [...]int8{
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 0, 9, 19, 0, 11, 1,
	2, 0, 4, 7, 0, 26, 27, 29, 0, 0,
	12, 16, 0, 13, 14, 6, 0, 0, 0, 36,
	37, 38, 39, 0, 0, 0, 0, 3, 8, 0,
	0, 0, 0, 0, 0, 0, 10, 20, 23, 0,
	0, 0, 24, 25, 0, 28, 30, 31, 0, 0,
	17, 18, 51, 52, 53, 54, 15, 0, 0, 40,
	42, 41, 43, 44, 32, 33, 21, 22, 45, 0,
	0, 0, 46, 0, 48, 0, 34, 35, 47, 0,
	0, 49, 50,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:85
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].returnClause}}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:88
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].setClause}}
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar/cyphernetes.y:91
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].setClause, yyDollar[3].returnClause}}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:94
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].deleteClause}}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:97
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].createClause}}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:100
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].createClause, yyDollar[2].returnClause}}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:103
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].createClause}}
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar/cyphernetes.y:106
		{
			result = &Expression{Clauses: []Clause{yyDollar[1].matchClause, yyDollar[2].createClause, yyDollar[3].returnClause}}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:112
		{
			yyVAL.matchClause = &MatchClause{Nodes: yyDollar[2].nodeRelationshipList.Nodes, Relationships: yyDollar[2].nodeRelationshipList.Relationships, ExtraFilters: nil}
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar/cyphernetes.y:115
		{
			yyVAL.matchClause = &MatchClause{Nodes: yyDollar[2].nodeRelationshipList.Nodes, Relationships: yyDollar[2].nodeRelationshipList.Relationships, ExtraFilters: yyDollar[4].keyValuePairs}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:121
		{
			yyVAL.createClause = &CreateClause{Nodes: yyDollar[2].nodeRelationshipList.Nodes, Relationships: yyDollar[2].nodeRelationshipList.Relationships}
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:127
		{
			yyVAL.setClause = &SetClause{KeyValuePairs: yyDollar[2].keyValuePairs}
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:133
		{
			yyVAL.deleteClause = &DeleteClause{NodeIds: yyDollar[2].nodeIds}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:139
		{
			yyVAL.nodeIds = []string{yyDollar[1].strVal}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:142
		{
			yyVAL.nodeIds = append(yyDollar[1].nodeIds, yyDollar[3].strVal)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:148
		{
			yyVAL.keyValuePairs = []*KeyValuePair{yyDollar[1].keyValuePair} // Start with one Property element
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:151
		{
			yyVAL.keyValuePairs = append(yyDollar[1].keyValuePairs, yyDollar[3].keyValuePair) // $1 and $3 are the left and right operands of COMMA
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:158
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyDollar[1].strVal, Value: yyDollar[3].value}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:164
		{
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         []*NodePattern{yyDollar[1].nodePattern},
				Relationships: []*Relationship{},
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:170
		{
			yyDollar[2].relationship.LeftNode = yyDollar[1].nodePattern
			yyDollar[2].relationship.RightNode = yyDollar[3].nodePattern
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         []*NodePattern{yyDollar[1].nodePattern, yyDollar[3].nodePattern},
				Relationships: []*Relationship{yyDollar[2].relationship},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:178
		{
			yyDollar[2].relationship.LeftNode = yyDollar[1].nodePattern
			yyDollar[2].relationship.RightNode = yyDollar[3].nodePattern
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyDollar[1].nodePattern, yyDollar[3].nodePattern}, yyDollar[5].nodeRelationshipList.Nodes...),
				Relationships: append([]*Relationship{yyDollar[2].relationship}, yyDollar[5].nodeRelationshipList.Relationships...),
			}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:186
		{
			yyDollar[2].relationship.LeftNode = yyDollar[1].nodePattern
			yyDollar[2].relationship.RightNode = yyDollar[3].nodePattern
			yyDollar[4].relationship.LeftNode = yyDollar[3].nodePattern
			yyDollar[4].relationship.RightNode = yyDollar[5].nodeRelationshipList.Nodes[0]
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyDollar[1].nodePattern, yyDollar[3].nodePattern}, yyDollar[5].nodeRelationshipList.Nodes...),
				Relationships: append([]*Relationship{yyDollar[2].relationship, yyDollar[4].relationship}, yyDollar[5].nodeRelationshipList.Relationships...),
			}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:196
		{
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyDollar[1].nodePattern}, yyDollar[3].nodeRelationshipList.Nodes...),
				Relationships: yyDollar[3].nodeRelationshipList.Relationships,
			}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:205
		{
			yyVAL.nodePattern = &NodePattern{ResourceProperties: yyDollar[2].resourceProperties}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:208
		{
			yyVAL.nodePattern = &NodePattern{&ResourceProperties{Name: yyDollar[2].strVal, Kind: "", Properties: nil, JsonData: ""}}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar/cyphernetes.y:214
		{
			yyVAL.returnClause = &ReturnClause{Items: yyDollar[2].returnItems}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:220
		{
			yyVAL.returnItems = []*ReturnItem{{JsonPath: yyDollar[1].strVal}}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:223
		{
			yyVAL.returnItems = append(yyDollar[1].returnItems, &ReturnItem{JsonPath: yyDollar[3].strVal})
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:226
		{
			yyVAL.returnItems = []*ReturnItem{yyDollar[1].returnItem}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:229
		{
			yyVAL.returnItems = append(yyDollar[1].returnItems, yyDollar[3].returnItem)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:235
		{
			yyVAL.returnItem = &ReturnItem{JsonPath: yyDollar[1].strVal, Alias: yyDollar[3].strVal}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar/cyphernetes.y:238
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "COUNT", JsonPath: yyDollar[3].strVal}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar/cyphernetes.y:241
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "SUM", JsonPath: yyDollar[3].strVal}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar/cyphernetes.y:244
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "COUNT", JsonPath: yyDollar[3].strVal, Alias: yyDollar[6].strVal}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar/cyphernetes.y:247
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "SUM", JsonPath: yyDollar[3].strVal, Alias: yyDollar[6].strVal}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:253
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: None, LeftNode: nil, RightNode: nil}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:256
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Left, LeftNode: nil, RightNode: nil}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:259
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Right, LeftNode: nil, RightNode: nil}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:262
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Both, LeftNode: nil, RightNode: nil}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:265
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: None, LeftNode: nil, RightNode: nil}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:268
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: Left, LeftNode: nil, RightNode: nil}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:271
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: Right, LeftNode: nil, RightNode: nil}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:274
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyDollar[2].resourceProperties, Direction: Both, LeftNode: nil, RightNode: nil}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:280
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyDollar[1].strVal, Kind: yyDollar[3].strVal, Properties: nil, JsonData: ""}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar/cyphernetes.y:283
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyDollar[1].strVal, Kind: yyDollar[3].strVal, Properties: yyDollar[4].properties, JsonData: ""}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar/cyphernetes.y:286
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyDollar[1].strVal, Kind: yyDollar[3].strVal, Properties: nil, JsonData: yyDollar[5].strVal}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:292
		{
			yyVAL.properties = &Properties{PropertyList: yyDollar[2].jsonPathValueList}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:298
		{
			yyVAL.jsonPathValueList = []*Property{yyDollar[1].jsonPathValue} // Start with one Property element
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:301
		{
			yyVAL.jsonPathValueList = append(yyDollar[1].jsonPathValueList, yyDollar[3].jsonPathValue) // $1 and $3 are the left and right operands of COMMA
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar/cyphernetes.y:307
		{
			yyVAL.jsonPathValue = &Property{Key: yyDollar[1].strVal, Value: yyDollar[3].value}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:313
		{
			yyVAL.value = strings.Trim(yyDollar[1].strVal, "\"")
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:316
		{
			// Parse the int from the string
			i, err := strconv.Atoi(yyDollar[1].strVal)
			if err != nil {
				// ... handle error
				panic(err)
			}
			yyVAL.value = i
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:325
		{
			// Parse the boolean from the string
			yyVAL.value = strings.ToUpper(yyDollar[1].strVal) == "TRUE"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar/cyphernetes.y:329
		{
			yyVAL.value = yyDollar[1].strVal
		}
	}
	goto yystack /* stack new state and value */
}
