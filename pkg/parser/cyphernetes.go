// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"log"
	"strconv"
	"strings"
)

func yyerror(s string) {
	fmt.Printf("Syntax error: %s\n", s)
}

func debugLog(v ...interface{}) {
	if LogLevel == "debug" {
		log.Println(v...)
	}
}

type yySymType struct {
	yys                  int
	strVal               string
	jsonPath             string
	nodePattern          *NodePattern
	clause               *Clause
	expression           *Expression
	matchClause          *MatchClause
	setClause            *SetClause
	deleteClause         *DeleteClause
	createClause         *CreateClause
	returnClause         *ReturnClause
	returnItems          []*ReturnItem
	returnItem           *ReturnItem
	properties           *Properties
	jsonPathValue        *Property
	jsonPathValueList    []*Property
	keyValuePairs        []*KeyValuePair
	keyValuePair         *KeyValuePair
	value                interface{}
	relationship         *Relationship
	resourceProperties   *ResourceProperties
	nodeRelationshipList *NodeRelationshipList
	nodeIds              []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault           = 57383
	yyEofCode           = 57344
	AS                  = 57366
	BOOLEAN             = 57349
	COLON               = 57354
	COMMA               = 57364
	CONTAINS            = 57382
	COUNT               = 57375
	CREATE              = 57359
	DELETE              = 57358
	EOF                 = 57361
	EQUALS              = 57365
	GREATER_THAN        = 57378
	GREATER_THAN_EQUALS = 57380
	IDENT               = 57346
	INT                 = 57348
	JSONDATA            = 57351
	JSONPATH            = 57347
	LBRACE              = 57362
	LESS_THAN           = 57379
	LESS_THAN_EQUALS    = 57381
	LPAREN              = 57352
	MATCH               = 57355
	NOT_EQUALS          = 57377
	RBRACE              = 57363
	REL_BEGINPROPS_LEFT = 57371
	REL_BEGINPROPS_NONE = 57372
	REL_ENDPROPS_NONE   = 57374
	REL_ENDPROPS_RIGHT  = 57373
	REL_NOPROPS_BOTH    = 57369
	REL_NOPROPS_LEFT    = 57368
	REL_NOPROPS_NONE    = 57370
	REL_NOPROPS_RIGHT   = 57367
	RETURN              = 57360
	RPAREN              = 57353
	SET                 = 57357
	STRING              = 57350
	SUM                 = 57376
	WHERE               = 57356
	yyErrCode           = 57345

	yyMaxDepth = 200
	yyTabOfs   = -60
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57361: 0,  // EOF (42x)
		57364: 1,  // COMMA (35x)
		57360: 2,  // RETURN (28x)
		57359: 3,  // CREATE (24x)
		57358: 4,  // DELETE (23x)
		57357: 5,  // SET (23x)
		57352: 6,  // LPAREN (14x)
		57363: 7,  // RBRACE (10x)
		57344: 8,  // $end (9x)
		57346: 9,  // IDENT (9x)
		57351: 10, // JSONDATA (9x)
		57347: 11, // JSONPATH (9x)
		57349: 12, // BOOLEAN (8x)
		57348: 13, // INT (8x)
		57350: 14, // STRING (8x)
		57402: 15, // Value (8x)
		57356: 16, // WHERE (8x)
		57393: 17, // NodePattern (6x)
		57374: 18, // REL_ENDPROPS_NONE (6x)
		57373: 19, // REL_ENDPROPS_RIGHT (6x)
		57353: 20, // RPAREN (6x)
		57394: 21, // NodeRelationshipList (5x)
		57371: 22, // REL_BEGINPROPS_LEFT (4x)
		57372: 23, // REL_BEGINPROPS_NONE (4x)
		57369: 24, // REL_NOPROPS_BOTH (4x)
		57368: 25, // REL_NOPROPS_LEFT (4x)
		57370: 26, // REL_NOPROPS_NONE (4x)
		57367: 27, // REL_NOPROPS_RIGHT (4x)
		57398: 28, // ReturnClause (4x)
		57366: 29, // AS (3x)
		57354: 30, // COLON (3x)
		57389: 31, // KeyValuePair (3x)
		57362: 32, // LBRACE (3x)
		57397: 33, // ResourceProperties (3x)
		57375: 34, // COUNT (2x)
		57384: 35, // CreateClause (2x)
		57387: 36, // JSONPathValue (2x)
		57390: 37, // KeyValuePairs (2x)
		57396: 38, // Relationship (2x)
		57399: 39, // ReturnItem (2x)
		57376: 40, // SUM (2x)
		57382: 41, // CONTAINS (1x)
		57385: 42, // DeleteClause (1x)
		57365: 43, // EQUALS (1x)
		57386: 44, // Expression (1x)
		57378: 45, // GREATER_THAN (1x)
		57380: 46, // GREATER_THAN_EQUALS (1x)
		57388: 47, // JSONPathValueList (1x)
		57379: 48, // LESS_THAN (1x)
		57381: 49, // LESS_THAN_EQUALS (1x)
		57355: 50, // MATCH (1x)
		57391: 51, // MatchClause (1x)
		57392: 52, // NodeIds (1x)
		57377: 53, // NOT_EQUALS (1x)
		57395: 54, // Properties (1x)
		57400: 55, // ReturnItems (1x)
		57401: 56, // SetClause (1x)
		57383: 57, // $default (0x)
		57345: 58, // error (0x)
	}

	yySymNames = []string{
		"EOF",
		"COMMA",
		"RETURN",
		"CREATE",
		"DELETE",
		"SET",
		"LPAREN",
		"RBRACE",
		"$end",
		"IDENT",
		"JSONDATA",
		"JSONPATH",
		"BOOLEAN",
		"INT",
		"STRING",
		"Value",
		"WHERE",
		"NodePattern",
		"REL_ENDPROPS_NONE",
		"REL_ENDPROPS_RIGHT",
		"RPAREN",
		"NodeRelationshipList",
		"REL_BEGINPROPS_LEFT",
		"REL_BEGINPROPS_NONE",
		"REL_NOPROPS_BOTH",
		"REL_NOPROPS_LEFT",
		"REL_NOPROPS_NONE",
		"REL_NOPROPS_RIGHT",
		"ReturnClause",
		"AS",
		"COLON",
		"KeyValuePair",
		"LBRACE",
		"ResourceProperties",
		"COUNT",
		"CreateClause",
		"JSONPathValue",
		"KeyValuePairs",
		"Relationship",
		"ReturnItem",
		"SUM",
		"CONTAINS",
		"DeleteClause",
		"EQUALS",
		"Expression",
		"GREATER_THAN",
		"GREATER_THAN_EQUALS",
		"JSONPathValueList",
		"LESS_THAN",
		"LESS_THAN_EQUALS",
		"MATCH",
		"MatchClause",
		"NodeIds",
		"NOT_EQUALS",
		"Properties",
		"ReturnItems",
		"SetClause",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {44, 3},
		2:  {44, 3},
		3:  {44, 4},
		4:  {44, 3},
		5:  {44, 2},
		6:  {44, 3},
		7:  {44, 3},
		8:  {44, 4},
		9:  {51, 2},
		10: {51, 4},
		11: {35, 2},
		12: {56, 2},
		13: {42, 2},
		14: {52, 1},
		15: {52, 3},
		16: {37, 1},
		17: {37, 3},
		18: {31, 3},
		19: {31, 3},
		20: {31, 3},
		21: {31, 3},
		22: {31, 3},
		23: {31, 3},
		24: {31, 3},
		25: {21, 1},
		26: {21, 3},
		27: {21, 5},
		28: {21, 5},
		29: {21, 3},
		30: {17, 3},
		31: {17, 3},
		32: {28, 2},
		33: {55, 1},
		34: {55, 3},
		35: {39, 1},
		36: {39, 3},
		37: {39, 4},
		38: {39, 4},
		39: {39, 6},
		40: {39, 6},
		41: {38, 1},
		42: {38, 1},
		43: {38, 1},
		44: {38, 1},
		45: {38, 3},
		46: {38, 3},
		47: {38, 3},
		48: {38, 3},
		49: {33, 3},
		50: {33, 4},
		51: {33, 5},
		52: {54, 3},
		53: {47, 1},
		54: {47, 3},
		55: {36, 3},
		56: {15, 1},
		57: {15, 1},
		58: {15, 1},
		59: {15, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [114][]uint16{
		// 0
		{3: 65, 35: 63, 44: 61, 50: 64, 62},
		{8: 60},
		{2: 134, 65, 160, 159, 28: 155, 35: 158, 42: 157, 56: 156},
		{132, 2: 134, 28: 133},
		{6: 68, 17: 67, 21: 111},
		// 5
		{6: 68, 17: 67, 21: 66},
		{49, 2: 49},
		{35, 91, 35, 35, 35, 35, 16: 35, 22: 97, 96, 95, 93, 92, 94, 38: 90},
		{9: 70, 33: 69},
		{20: 89},
		// 10
		{20: 71, 30: 72},
		{29, 29, 29, 29, 29, 29, 16: 29, 22: 29, 29, 29, 29, 29, 29},
		{9: 73},
		{18: 11, 11, 11, 32: 75, 54: 74},
		{18: 10, 10, 10},
		// 15
		{10: 76, 79, 36: 78, 47: 77},
		{18: 9, 9, 9},
		{1: 87, 7: 86},
		{1: 7, 7: 7},
		{30: 80},
		// 20
		{10: 85, 12: 84, 83, 82, 81},
		{1: 5, 7: 5},
		{4, 4, 4, 4, 4, 4, 7: 4},
		{3, 3, 3, 3, 3, 3, 7: 3},
		{2, 2, 2, 2, 2, 2, 7: 2},
		// 25
		{1, 1, 1, 1, 1, 1, 7: 1},
		{18: 8, 8, 8},
		{11: 79, 36: 88},
		{1: 6, 7: 6},
		{30, 30, 30, 30, 30, 30, 16: 30, 22: 30, 30, 30, 30, 30, 30},
		// 30
		{6: 68, 17: 106},
		{6: 68, 17: 67, 21: 105},
		{6: 19},
		{6: 18},
		{6: 17},
		// 35
		{6: 16},
		{9: 99, 33: 102},
		{9: 99, 33: 98},
		{18: 100, 101},
		{30: 72},
		// 40
		{6: 14},
		{6: 12},
		{18: 103, 104},
		{6: 15},
		{6: 13},
		// 45
		{31, 2: 31, 31, 31, 31, 16: 31},
		{34, 107, 34, 34, 34, 34, 16: 34, 22: 97, 96, 95, 93, 92, 94, 38: 108},
		{6: 68, 17: 67, 21: 110},
		{6: 68, 17: 67, 21: 109},
		{32, 2: 32, 32, 32, 32, 16: 32},
		// 50
		{33, 2: 33, 33, 33, 33, 16: 33},
		{2: 51, 51, 51, 51, 16: 112},
		{11: 115, 31: 114, 37: 113},
		{1: 130, 50, 50, 50, 50},
		{44, 44, 44, 44, 44, 44},
		// 55
		{41: 122, 43: 116, 45: 118, 120, 48: 119, 121, 53: 117},
		{10: 85, 12: 84, 83, 82, 129},
		{10: 85, 12: 84, 83, 82, 128},
		{10: 85, 12: 84, 83, 82, 127},
		{10: 85, 12: 84, 83, 82, 126},
		// 60
		{10: 85, 12: 84, 83, 82, 125},
		{10: 85, 12: 84, 83, 82, 124},
		{10: 85, 12: 84, 83, 82, 123},
		{36, 36, 36, 36, 36, 36},
		{37, 37, 37, 37, 37, 37},
		// 65
		{38, 38, 38, 38, 38, 38},
		{39, 39, 39, 39, 39, 39},
		{40, 40, 40, 40, 40, 40},
		{41, 41, 41, 41, 41, 41},
		{42, 42, 42, 42, 42, 42},
		// 70
		{11: 115, 31: 131},
		{43, 43, 43, 43, 43, 43},
		{8: 55},
		{154},
		{11: 137, 34: 138, 39: 136, 139, 55: 135},
		// 75
		{28, 152},
		{27, 27},
		{25, 25, 29: 150},
		{32: 145},
		{32: 140},
		// 80
		{11: 141},
		{7: 142},
		{22, 22, 29: 143},
		{9: 144},
		{20, 20},
		// 85
		{11: 146},
		{7: 147},
		{23, 23, 29: 148},
		{9: 149},
		{21, 21},
		// 90
		{9: 151},
		{24, 24},
		{11: 137, 34: 138, 39: 153, 139},
		{26, 26},
		{8: 54},
		// 95
		{173},
		{170, 2: 134, 28: 171},
		{169},
		{166, 2: 134, 28: 167},
		{11: 115, 31: 114, 37: 165},
		// 100
		{9: 162, 52: 161},
		{47, 163},
		{46, 46},
		{9: 164},
		{45, 45},
		// 105
		{48, 130, 48},
		{8: 53},
		{168},
		{8: 52},
		{8: 56},
		// 110
		{8: 58},
		{172},
		{8: 57},
		{8: 59},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 58

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-2].matchClause, yyS[yypt-1].returnClause}}
		}
	case 2:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-2].matchClause, yyS[yypt-1].setClause}}
		}
	case 3:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-3].matchClause, yyS[yypt-2].setClause, yyS[yypt-1].returnClause}}
		}
	case 4:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-2].matchClause, yyS[yypt-1].deleteClause}}
		}
	case 5:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-1].createClause}}
		}
	case 6:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-2].createClause, yyS[yypt-1].returnClause}}
		}
	case 7:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-2].matchClause, yyS[yypt-1].createClause}}
		}
	case 8:
		{
			result = &Expression{Clauses: []Clause{yyS[yypt-3].matchClause, yyS[yypt-2].createClause, yyS[yypt-1].returnClause}}
		}
	case 9:
		{
			yyVAL.matchClause = &MatchClause{Nodes: yyS[yypt-0].nodeRelationshipList.Nodes, Relationships: yyS[yypt-0].nodeRelationshipList.Relationships, ExtraFilters: nil}
		}
	case 10:
		{
			yyVAL.matchClause = &MatchClause{Nodes: yyS[yypt-2].nodeRelationshipList.Nodes, Relationships: yyS[yypt-2].nodeRelationshipList.Relationships, ExtraFilters: yyS[yypt-0].keyValuePairs}
		}
	case 11:
		{
			yyVAL.createClause = &CreateClause{Nodes: yyS[yypt-0].nodeRelationshipList.Nodes, Relationships: yyS[yypt-0].nodeRelationshipList.Relationships}
		}
	case 12:
		{
			yyVAL.setClause = &SetClause{KeyValuePairs: yyS[yypt-0].keyValuePairs}
		}
	case 13:
		{
			yyVAL.deleteClause = &DeleteClause{NodeIds: yyS[yypt-0].nodeIds}
		}
	case 14:
		{
			yyVAL.nodeIds = []string{yyS[yypt-0].strVal}
		}
	case 15:
		{
			yyVAL.nodeIds = append(yyS[yypt-2].nodeIds, yyS[yypt-0].strVal)
		}
	case 16:
		{
			yyVAL.keyValuePairs = []*KeyValuePair{yyS[yypt-0].keyValuePair} // Start with one Property element
		}
	case 17:
		{
			yyVAL.keyValuePairs = append(yyS[yypt-2].keyValuePairs, yyS[yypt-0].keyValuePair) // $1 and $3 are the left and right operands of COMMA
		}
	case 18:
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value, Operator: "EQUALS"} // ==
		}
	case 19:
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value, Operator: "NOT_EQUALS"} // !=
		}
	case 20:
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value, Operator: "GREATER_THAN"} // >
		}
	case 21:
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value, Operator: "LESS_THAN"} // <
		}
	case 22:
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value, Operator: "GREATER_THAN_EQUALS"} // >=
		}
	case 23:
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value, Operator: "LESS_THAN_EQUALS"} // <=
		}
	case 24:
		{
			yyVAL.keyValuePair = &KeyValuePair{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value, Operator: "CONTAINS"} // CONTAINS
		}
	case 25:
		{
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         []*NodePattern{yyS[yypt-0].nodePattern},
				Relationships: []*Relationship{},
			}
		}
	case 26:
		{
			yyS[yypt-1].relationship.LeftNode = yyS[yypt-2].nodePattern
			yyS[yypt-1].relationship.RightNode = yyS[yypt-0].nodePattern
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         []*NodePattern{yyS[yypt-2].nodePattern, yyS[yypt-0].nodePattern},
				Relationships: []*Relationship{yyS[yypt-1].relationship},
			}
		}
	case 27:
		{
			yyS[yypt-3].relationship.LeftNode = yyS[yypt-4].nodePattern
			yyS[yypt-3].relationship.RightNode = yyS[yypt-2].nodePattern
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyS[yypt-4].nodePattern, yyS[yypt-2].nodePattern}, yyS[yypt-0].nodeRelationshipList.Nodes...),
				Relationships: append([]*Relationship{yyS[yypt-3].relationship}, yyS[yypt-0].nodeRelationshipList.Relationships...),
			}
		}
	case 28:
		{
			yyS[yypt-3].relationship.LeftNode = yyS[yypt-4].nodePattern
			yyS[yypt-3].relationship.RightNode = yyS[yypt-2].nodePattern
			yyS[yypt-1].relationship.LeftNode = yyS[yypt-2].nodePattern
			yyS[yypt-1].relationship.RightNode = yyS[yypt-0].nodeRelationshipList.Nodes[0]
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyS[yypt-4].nodePattern, yyS[yypt-2].nodePattern}, yyS[yypt-0].nodeRelationshipList.Nodes...),
				Relationships: append([]*Relationship{yyS[yypt-3].relationship, yyS[yypt-1].relationship}, yyS[yypt-0].nodeRelationshipList.Relationships...),
			}
		}
	case 29:
		{
			yyVAL.nodeRelationshipList = &NodeRelationshipList{
				Nodes:         append([]*NodePattern{yyS[yypt-2].nodePattern}, yyS[yypt-0].nodeRelationshipList.Nodes...),
				Relationships: yyS[yypt-0].nodeRelationshipList.Relationships,
			}
		}
	case 30:
		{
			yyVAL.nodePattern = &NodePattern{ResourceProperties: yyS[yypt-1].resourceProperties}
		}
	case 31:
		{
			yyVAL.nodePattern = &NodePattern{&ResourceProperties{Name: yyS[yypt-1].strVal, Kind: "", Properties: nil, JsonData: ""}}
		}
	case 32:
		{
			yyVAL.returnClause = &ReturnClause{Items: yyS[yypt-0].returnItems}
		}
	case 33:
		{
			yyVAL.returnItems = []*ReturnItem{yyS[yypt-0].returnItem}
		}
	case 34:
		{
			yyVAL.returnItems = append(yyS[yypt-2].returnItems, yyS[yypt-0].returnItem)
		}
	case 35:
		{
			yyVAL.returnItem = &ReturnItem{JsonPath: yyS[yypt-0].strVal}
		}
	case 36:
		{
			yyVAL.returnItem = &ReturnItem{JsonPath: yyS[yypt-2].strVal, Alias: yyS[yypt-0].strVal}
		}
	case 37:
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "COUNT", JsonPath: yyS[yypt-1].strVal}
		}
	case 38:
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "SUM", JsonPath: yyS[yypt-1].strVal}
		}
	case 39:
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "COUNT", JsonPath: yyS[yypt-3].strVal, Alias: yyS[yypt-0].strVal}
		}
	case 40:
		{
			yyVAL.returnItem = &ReturnItem{Aggregate: "SUM", JsonPath: yyS[yypt-3].strVal, Alias: yyS[yypt-0].strVal}
		}
	case 41:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: None, LeftNode: nil, RightNode: nil}
		}
	case 42:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Left, LeftNode: nil, RightNode: nil}
		}
	case 43:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Right, LeftNode: nil, RightNode: nil}
		}
	case 44:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: nil, Direction: Both, LeftNode: nil, RightNode: nil}
		}
	case 45:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyS[yypt-1].resourceProperties, Direction: None, LeftNode: nil, RightNode: nil}
		}
	case 46:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyS[yypt-1].resourceProperties, Direction: Left, LeftNode: nil, RightNode: nil}
		}
	case 47:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyS[yypt-1].resourceProperties, Direction: Right, LeftNode: nil, RightNode: nil}
		}
	case 48:
		{
			yyVAL.relationship = &Relationship{ResourceProperties: yyS[yypt-1].resourceProperties, Direction: Both, LeftNode: nil, RightNode: nil}
		}
	case 49:
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyS[yypt-2].strVal, Kind: yyS[yypt-0].strVal, Properties: nil, JsonData: ""}
		}
	case 50:
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyS[yypt-3].strVal, Kind: yyS[yypt-1].strVal, Properties: yyS[yypt-0].properties, JsonData: ""}
		}
	case 51:
		{
			yyVAL.resourceProperties = &ResourceProperties{Name: yyS[yypt-4].strVal, Kind: yyS[yypt-2].strVal, Properties: nil, JsonData: yyS[yypt-0].strVal}
		}
	case 52:
		{
			yyVAL.properties = &Properties{PropertyList: yyS[yypt-1].jsonPathValueList}
		}
	case 53:
		{
			yyVAL.jsonPathValueList = []*Property{yyS[yypt-0].jsonPathValue} // Start with one Property element
		}
	case 54:
		{
			yyVAL.jsonPathValueList = append(yyS[yypt-2].jsonPathValueList, yyS[yypt-0].jsonPathValue) // $1 and $3 are the left and right operands of COMMA
		}
	case 55:
		{
			yyVAL.jsonPathValue = &Property{Key: yyS[yypt-2].strVal, Value: yyS[yypt-0].value}
		}
	case 56:
		{
			yyVAL.value = strings.Trim(yyS[yypt-0].strVal, "\"")
		}
	case 57:
		{
			// Parse the int from the string
			i, err := strconv.Atoi(yyS[yypt-0].strVal)
			if err != nil {
				// ... handle error
				panic(err)
			}
			yyVAL.value = i
		}
	case 58:
		{
			// Parse the boolean from the string
			yyVAL.value = strings.ToUpper(yyS[yypt-0].strVal) == "TRUE"
		}
	case 59:
		{
			yyVAL.value = yyS[yypt-0].strVal
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
